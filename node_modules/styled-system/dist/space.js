'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('./util');

var isNegative = function isNegative(n) {
  return n < 0;
};

var REG = /^[mp][trblxy]?$/;

var properties = {
  m: 'margin',
  p: 'padding'
};

var directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};

var getProperties = function getProperties(key) {
  var _key$split = key.split(''),
      a = _key$split[0],
      b = _key$split[1];

  var property = properties[a];
  var direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(function (dir) {
    return property + dir;
  }) : [property + direction];
};

var getValue = function getValue(scale) {
  return function (n) {
    if (!(0, _util.num)(n)) {
      return scale[n] || n;
    }
    var abs = Math.abs(n);
    var neg = isNegative(n);
    var value = scale[abs] || abs;
    if (!(0, _util.num)(value)) {
      return neg ? '-' + value : value;
    }
    return (0, _util.px)(value * (neg ? -1 : 1));
  };
};

var defaultScale = [0, 4, 8, 16, 32, 64, 128, 256, 512];

var space = function space(props) {
  var keys = Object.keys(props).filter(function (key) {
    return REG.test(key);
  }).sort();
  var scale = (0, _util.get)(props.theme, 'space') || defaultScale;
  var getStyle = getValue(scale);

  return keys.map(function (key) {
    var value = props[key];
    var properties = getProperties(key);

    var style = function style(n) {
      return (0, _util.is)(n) ? properties.reduce(function (a, prop) {
        var _extends2;

        return _extends({}, a, (_extends2 = {}, _extends2[prop] = getStyle(n), _extends2));
      }, {}) : null;
    };

    if (!Array.isArray(value)) {
      return style(value);
    }

    var breakpoints = [null].concat(((0, _util.get)(props.theme, 'breakpoints') || _util.defaultBreakpoints).map(_util.createMediaQuery));

    var styles = {};

    for (var i = 0; i < value.length; i++) {
      var media = breakpoints[i];
      if (!media) {
        styles = style(value[i]);
        continue;
      }
      var rule = style(value[i]);
      if (!rule) continue;
      styles[media] = rule;
    }

    return styles;
  }).reduce(_util.merge, {});
};

space.propTypes = {
  m: (0, _util.cloneFunc)(_util.propTypes.responsive),
  mt: (0, _util.cloneFunc)(_util.propTypes.responsive),
  mr: (0, _util.cloneFunc)(_util.propTypes.responsive),
  mb: (0, _util.cloneFunc)(_util.propTypes.responsive),
  ml: (0, _util.cloneFunc)(_util.propTypes.responsive),
  mx: (0, _util.cloneFunc)(_util.propTypes.responsive),
  my: (0, _util.cloneFunc)(_util.propTypes.responsive),
  p: (0, _util.cloneFunc)(_util.propTypes.responsive),
  pt: (0, _util.cloneFunc)(_util.propTypes.responsive),
  pr: (0, _util.cloneFunc)(_util.propTypes.responsive),
  pb: (0, _util.cloneFunc)(_util.propTypes.responsive),
  pl: (0, _util.cloneFunc)(_util.propTypes.responsive),
  px: (0, _util.cloneFunc)(_util.propTypes.responsive),
  py: (0, _util.cloneFunc)(_util.propTypes.responsive)
};

var meta = function meta(prop) {
  return {
    prop: prop,
    themeKey: 'space',
    styleType: 'responsive'
  };
};

Object.keys(space.propTypes).forEach(function (prop) {
  space.propTypes[prop].meta = meta(prop);
});

exports.default = space;